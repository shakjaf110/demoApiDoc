openapi: 3.0.0
info:
  title: Sample API
  description: A simple example of an OpenAPI specification in YAML.
  version: 2.0.0
  x-logo:
    url: "https://dev.eclear-solutions.com/logos/logo2.svg"
    backgroundColor: "#FFFFFF"
    altText: ""
servers:
  - url: http://localhost:8090
    description: Development Server

components:
  schemas:
    sampleMsg:
      type: object
      properties:
        message:
          title: A short, human-readable summary of the problem type. It shouldn't change based on the occurrence of the problem, except for purposes of localization.
          type: string
  securitySchemes:
    openId:
      type: openIdConnect
      openIdConnectUrl: https://keycloak-dev.eclear-solutions.com/realms/authorization/.well-known/openid-configuration
paths:
  /greet:
    get:
      operationId: getCall
      tags:
        - Greet
      description:
        test Get description
      summary: Get a greeting message
      responses:
        '200':
          description: Successful response from Germany
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sampleMsg'
    post:
      operationId: postCall
      tags:
        - Greet
      description:
        test Post description
      summary: Post a greeting message
      security:
        - openId:
            - SampleMsg:write
      x-codeSamples:
        - lang: Shell
          source: |-
            curl --location --request POST 'http://{server_url}/products' \
            --header 'accept: */*' \
            --header 'Content-Type: application/json' \
            --data-raw '{"name":"Product Repository Service"}'
      requestBody:
        required: true
        description: Sample
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sampleMsg'
      responses:
        '200':
          description: Successful response from Germany
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sampleMsg'
        '400':
          description: Invalid status value
  /greet/byStatus:
    get:
      tags:
        - Greet
      summary: Finds Greet by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findGreetByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            enum:
              - available
              - pending
              - sold
            default: available
      responses:
        '200':
          description: Successful response from Germany by status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sampleMsg'
        '400':
          description: Invalid status value
  /greet/byStatusError:
    get:
      tags:
        - Greet
      summary: Finds Greet by status - error
      description: Multiple status values can be provided with comma separated strings - error
      operationId: findGreetByStatusError
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            enum:
              - available
              - pending
              - sold
              - null
            default: available
      responses:
        '200':
          description: Successful response from Germany by status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sampleMsg'
        '400':
          description: Invalid status value